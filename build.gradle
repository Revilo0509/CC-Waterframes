plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.89'
    id 'idea'
}

group = mod_group_id
version = mod_version

java {
    toolchain.languageVersion = JavaLanguageVersion.of(21)
}

base {
    archivesName = mod_id
}

repositories {
    mavenLocal()
    maven {
        url "https://maven.squiddev.cc"
        content {
            includeGroup "cc.tweaked"
        }
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

neoForge {
    version = neo_version

    parchment {
        mappingsVersion = parchment_mappings_version
        minecraftVersion = parchment_minecraft_version
    }

    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', mod_id
        }
        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', mod_id
        }
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', mod_id
        }
        data {
            data()
            programArguments.addAll '--mod', mod_id, '--all',
                    '--output', file('src/generated/resources/').absolutePath,
                    '--existing', file('src/main/resources/').absolutePath
        }
        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
    srcDir 'build/generated/sources/modMetadata'
}

dependencies {
    compileOnly "cc.tweaked:cc-tweaked-${minecraft_version}-core-api:${cc_tweaked_version}"
    compileOnly "cc.tweaked:cc-tweaked-${minecraft_version}-forge-api:${cc_tweaked_version}"
    runtimeOnly "cc.tweaked:cc-tweaked-${minecraft_version}-forge:${cc_tweaked_version}"

    implementation "curse.maven:waterframes-834607:6386190"
    implementation "curse.maven:watermedia-869524:6457358"
    implementation "curse.maven:creativecore-257814:6550281"
}

tasks.register("generateModMetadata", ProcessResources) {
    def replaceProperties = [
            minecraft_version       : minecraft_version,
            minecraft_version_range : minecraft_version_range,
            neo_version             : neo_version,
            neo_version_range       : neo_version_range,
            loader_version_range    : loader_version_range,
            mod_id                  : mod_id,
            mod_name                : mod_name,
            mod_license             : mod_license,
            mod_version             : mod_version,
            mod_authors             : mod_authors,
            mod_description         : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
